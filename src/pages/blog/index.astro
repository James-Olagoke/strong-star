---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Load non-draft posts and sort by date (newest first)
const posts = (await getCollection('blog', ({ data }) => !data.draft))
  .sort((a, b) => +b.data.date - +a.data.date);

// Choose featured (first/newest)
const featured = posts[0];
const rest = posts.slice(1);

// Unique, sorted tag list
const allTags = Array.from(new Set(posts.flatMap(p => p.data.tags || []))).sort((a, b) => a.localeCompare(b));
---

<Layout title="Blog">
  <!-- FEATURED HERO -->
  {featured ? (
    <section class="relative overflow-hidden rounded-2xl border border-white/10 bg-zinc-900/60" data-animate>
      {featured.data.coverImage ? (
        <div class="relative aspect-[16/7]">
          <img src={featured.data.coverImage} alt={featured.data.title} class="h-full w-full object-cover" loading="lazy" />
          <div class="absolute inset-0 bg-gradient-to-t from-zinc-950/80 via-zinc-950/30 to-transparent"></div>
        </div>
      ) : (
        <div class="relative aspect-[16/7] bg-gradient-to-br from-indigo-700 via-indigo-600 to-fuchsia-700"></div>
      )}

      <div class="p-6 md:p-8">
        <p class="text-xs uppercase tracking-widest text-zinc-400">Featured</p>
        <h1 class="mt-2 text-2xl md:text-3xl font-extrabold text-white">
          <a href={`/blog/${featured.slug}`} class="hover:underline">{featured.data.title}</a>
        </h1>
        <p class="mt-2 text-zinc-400 max-w-3xl">{featured.data.description}</p>
        <p class="mt-3 text-sm text-zinc-500">
          {new Date(featured.data.date).toLocaleDateString()}
          {featured.data.tags?.length ? ` · ${featured.data.tags.join(', ')}` : ''}
        </p>
        <div class="mt-5">
          <a href={`/blog/${featured.slug}`} class="btn-primary">Read Post →</a>
        </div>
      </div>
    </section>
  ) : (
    <section class="rounded-2xl border border-white/10 bg-zinc-900/60 p-8" data-animate>
      <h1 class="text-2xl md:text-3xl font-extrabold text-white">Blog</h1>
      <p class="mt-2 text-zinc-400">No posts yet — add some in <code class="px-1 rounded bg-zinc-800/60">src/content/blog/</code>.</p>
    </section>
  )}

  <!-- FILTER BAR -->
  <section class="mt-8 rounded-2xl border border-white/10 bg-zinc-900/60 p-4 md:p-6" data-animate>
    <div class="flex flex-col md:flex-row md:items-center gap-4">
      <!-- Search -->
      <div class="flex-1">
        <label for="blog-search" class="sr-only">Search posts</label>
        <input
          id="blog-search"
          type="text"
          placeholder="Search by title or description…"
          class="w-full rounded-md border border-white/10 bg-zinc-950/70 px-4 py-2.5 text-zinc-100 placeholder:text-zinc-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>

      <!-- Tag chips -->
      <div class="flex flex-wrap gap-2">
        <button data-tag="all"
          class="chip active rounded-full border border-white/10 bg-zinc-800/70 px-3 py-1.5 text-sm text-zinc-100 hover:bg-zinc-800 focus:outline-none focus:ring-2 focus:ring-indigo-500">
          All
        </button>

        {allTags.map(tag => (
          <button data-tag={tag}
            class="chip rounded-full border border-white/10 bg-zinc-800/50 px-3 py-1.5 text-sm text-zinc-200 hover:bg-zinc-800 focus:outline-none focus:ring-2 focus:ring-indigo-500 capitalize">
            {tag}
          </button>
        ))}
      </div>
    </div>
  </section>

  <!-- POSTS GRID -->
  <section class="mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
    {rest.map(({ slug, data }) => (
      <article
        class="card card-surface overflow-hidden border border-white/10 hover:border-indigo-500/40 group"
        data-animate
        data-title={data.title.toLowerCase()}
        data-desc={data.description.toLowerCase()}
        data-tags={(data.tags || []).join(',')}
      >
        {data.coverImage && (
          <div class="relative -mx-6 -mt-6 mb-4 aspect-[16/9] overflow-hidden">
            <img
              src={data.coverImage}
              alt={data.title}
              class="h-full w-full object-cover transition duration-300 group-hover:scale-[1.03] group-hover:brightness-[1.05]"
              loading="lazy"
            />
            <div class="pointer-events-none absolute inset-0 ring-1 ring-inset ring-white/10"></div>
          </div>
        )}

        <h2 class="text-lg font-semibold text-white leading-snug">
          <a href={`/blog/${slug}`} class="hover:underline">{data.title}</a>
        </h2>
        <p class="mt-2 text-zinc-400">{data.description}</p>

        <p class="mt-2 text-sm text-zinc-500">
          {new Date(data.date).toLocaleDateString()}
          {data.tags?.length ? ` · ${data.tags.join(', ')}` : ''}
        </p>

        <div class="mt-3 flex flex-wrap gap-2">
          {(data.tags || []).map(tag => (
            <span class="rounded-full border border-white/10 bg-zinc-800/60 px-2.5 py-1 text-xs text-zinc-200 capitalize">
              {tag}
            </span>
          ))}
        </div>

        <div class="mt-5">
          <a href={`/blog/${slug}`} class="btn-primary">Read →</a>
        </div>
      </article>
    ))}
  </section>

  <!-- Empty state (if filters hide everything) -->
  <p id="no-results" class="mt-12 text-center text-zinc-500 hidden">
    No posts match your filters.
  </p>

  <!-- Filter script -->
  <script is:inline>
    const input = document.querySelector('#blog-search');
    const chips = Array.from(document.querySelectorAll('.chip'));
    const cards = Array.from(document.querySelectorAll('article[data-title]'));
    const empty = document.querySelector('#no-results');

    let activeTag = 'all';

    function applyFilters() {
      const q = (input?.value || '').trim().toLowerCase();

      let visible = 0;
      for (const el of cards) {
        const title = el.dataset.title || '';
        const desc  = el.dataset.desc || '';
        const tags  = (el.dataset.tags || '').split(',');

        const matchText = !q || title.includes(q) || desc.includes(q);
        const matchTag  = activeTag === 'all' || tags.includes(activeTag);

        const show = matchText && matchTag;
        el.classList.toggle('hidden', !show);
        if (show) visible++;
      }

      empty?.classList.toggle('hidden', visible !== 0);
    }

    input?.addEventListener('input', applyFilters);

    chips.forEach(btn => {
      btn.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('active', 'bg-zinc-800/70'));
        btn.classList.add('active', 'bg-zinc-800/70');
        activeTag = btn.dataset.tag || 'all';
        applyFilters();
      });
    });

    // Initial apply
    applyFilters();
  </script>
</Layout>
